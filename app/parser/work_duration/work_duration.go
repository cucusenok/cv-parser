package work_duration

import (
	"errors"
	"fmt"
	"regexp"
	"strconv"
	"strings"
)

var (
	RegexDateRangeExcludeEnd *regexp.Regexp = regexp.MustCompile(`(19|20)\d{2}(.*(19|20)\d{2})?`)
	regexFullDate            *regexp.Regexp = regexp.MustCompile(`(?:(?P<day>\d{1,2})\D{1})?(?:(?P<month>\d{1,2}|(?i)[a-z–∞-—è]+)\D{1})?(?P<year>\d{4})`)
	RegexDates               *regexp.Regexp = regexp.MustCompile(`(?P<reverseDate>(19|20)\d{2}(\D{1,3}\d{1,2}|(?i)[a-z–∞-—è]+)?(\D{1,3}\d{1,2})?)(\D|$)|(?P<normalDate>(\d{1,2}\D{1,3})?((\d{1,2}|(?i)[a-z–∞-—è]+)\D{1,3})?(19|20)\d{2})`)
	regexFullDateReverse     *regexp.Regexp = regexp.MustCompile(`(?P<year>(19|20)\d{2})(\D{1}(?P<month>(\d{1,2}|(?i)[a-z–∞-—è]+)))(\D{1}(?P<day>\d{1,2}))?`)
	regexNonDigit            *regexp.Regexp = regexp.MustCompile(`\D`)
	monthPattern             *regexp.Regexp = regexp.MustCompile(`(?i)[a-z–∞-—è]+`)
	RegexDatesWithoutDigit   *regexp.Regexp = regexp.MustCompile(`(?P<reverseDate>(19|20)\d{2}(\D{1,3}\d{1,2})?(\D{1,3}\d{1,2})?)(\D|$)|(?P<normalDate>(\d{1,2}\D{1,3})?((\d{1,2})\D{1,3})?(19|20)\d{2})`)
)

type WorkPeriod struct {
	DateStart string `json:"start_date"`
	DateEnd   string `json:"end_date"`
}

type Month struct {
	MonthRoot string `json:"month"`
	Index     int    `json:"index"`
}

var months = []Month{
	{MonthRoot: "jan", Index: 1},
	{MonthRoot: "feb", Index: 2},
	{MonthRoot: "mar", Index: 3},
	{MonthRoot: "apr", Index: 4},
	{MonthRoot: "may", Index: 5},
	{MonthRoot: "jun", Index: 6},
	{MonthRoot: "jul", Index: 7},
	{MonthRoot: "aug", Index: 8},
	{MonthRoot: "sep", Index: 9},
	{MonthRoot: "oct", Index: 10},
	{MonthRoot: "nov", Index: 11},
	{MonthRoot: "dec", Index: 12},
	{MonthRoot: "—è–Ω–≤", Index: 1},
	{MonthRoot: "—Ñ–µ–≤", Index: 2},
	{MonthRoot: "–º–∞—Ä", Index: 3},
	{MonthRoot: "–∞–ø—Ä", Index: 4},
	{MonthRoot: "–º–∞–π", Index: 5},
	{MonthRoot: "–∏—é–Ω", Index: 6},
	{MonthRoot: "–∏—é–ª", Index: 7},
	{MonthRoot: "–∞–≤–≥", Index: 8},
	{MonthRoot: "—Å–µ–Ω", Index: 9},
	{MonthRoot: "–æ–∫—Ç", Index: 10},
	{MonthRoot: "–Ω–æ—è", Index: 11},
	{MonthRoot: "–¥–µ–∫", Index: 12},
}

const TYPE_DATE_NORMAL = "normalDate"   // 20.12.2024
const TYPE_DATE_REVERSE = "reverseDate" // 2024.12.20

/*
separateDates –§—É–Ω–∫—Ü–∏—è —Ä–∞–∑–¥–µ–ª—è—é—â–∞—è –¥–∞—Ç—ã.

‚Ä¢	–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢	"1998.1.11_2000.11.11" => ["1998.1.11", "2000.11.11"]
‚Ä¢	"1998.2.12_2000.11" => ["1998.2.12", "2000.11"]
‚Ä¢	"1998.3.13_2000" => ["1998.3.13", "13_2000"]
‚Ä¢	"11.1998_2000.11.11" => ["11.1998", "2000.11.11"]
‚Ä¢	"1998 2000/11/11" => ["1998", "2000/11/11"]

–∏ —Ç–¥
*/
func SeparateDates(date string) []string {
	matches := RegexDates.FindAllStringSubmatch(date, -1)
	// —Ç—É—Ç –º—ã –æ–∂–∏–¥–∞–µ–º –≥—Ä—É–ø–ø—ã normal –∏–ª–∏ reverse
	// –∏ –µ—Å–ª–∏ –æ–¥–Ω–∞ –∏–∑ —ç—Ç–∏—Ö –≥—Ä—É–ø –Ω–∞–π–¥–µ–Ω–∞ - —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—é
	groupNames := RegexDates.SubexpNames()
	result := []string{}

	for _, match := range matches {
		for i, name := range groupNames {
			if len(name) == 0 {
				continue
			}
			if (name == TYPE_DATE_REVERSE || name == TYPE_DATE_NORMAL) && i < len(match) && len(match[i]) > 0 {
				result = append(result, match[i])
			}
		}
	}

	return result
}

/*
convertMonthToNumber –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –º–µ—Å—è—Ü–∞ –Ω–∞ —á–∏—Å–ª–æ–≤–æ–π.
–ï—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0.

‚Ä¢	–ü—Ä–∏–º–µ—Ä—ã —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –¥–∞—Ç:
‚Ä¢	"–ù–æ—è–±—Ä—è" => "11"
‚Ä¢	"November" => "11"
‚Ä¢	"Nov" => "11"

–∏ —Ç–¥
*/
func convertMonthToNumber(month string) int {
	month = strings.ToLower(month)
	for _, m := range months {
		if strings.Contains(month, m.MonthRoot) {
			return m.Index
		}
	}
	return 0
}

/*
ReplaceDateWithMonthNumber –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –º–µ—Å—è—Ü–∞ –Ω–∞ —á–∏—Å–ª–æ–≤–æ–π.
–ï—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É.

‚Ä¢	–ü—Ä–∏–º–µ—Ä—ã —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –¥–∞—Ç:
‚Ä¢	"1 –ù–æ—è–±—Ä—è 1923" => "1 11 1923"
‚Ä¢	"–ù–æ—è–±—Ä—å 1923" => "11 1923"
‚Ä¢	"1 November 1923" => "1 11 1923"
‚Ä¢	"Nov 1923" => "11 1923"
*/
func ReplaceDateWithMonthNumber(date string) string {
	replacedStr := monthPattern.ReplaceAllStringFunc(date, func(match string) string {
		index := strconv.Itoa(convertMonthToNumber(match))
		if index != "0" {
			res := formatDayOrMonth(index)
			return res
		}
		return match
	})

	return replacedStr
}

/*
	reverseDate –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ dd.mm.yyyy.
	–ü—Ä–∏–º–µ—Ä—ã reverseDate:

	2022/09/01 => 01.09.2022
	2022.09.01 => 01.09.2022
	2022.09 => 09.2022
*/

func reverseDate(date string) string {
	match := regexFullDateReverse.FindAllStringSubmatch(date, -1)
	groupNames := regexFullDateReverse.SubexpNames()

	var year, month, day string

	for _, m := range match {
		for i, name := range groupNames {
			if name == "year" && i < len(m) {
				year = m[i]
			} else if name == "month" && i < len(m) {
				month = m[i]
			} else if name == "day" && i < len(m) {
				day = m[i]
			}
		}
	}

	if len(match) == 0 {
		return date
	}

	isWithoutDays := len(day) == 0
	onlyYear := len(month) == 0 && len(day) == 0

	switch {
	case onlyYear:
		return year
	case isWithoutDays:
		return fmt.Sprintf("%s.%s", formatDayOrMonth(month), year)
	default:
		return fmt.Sprintf("%s.%s.%s", formatDayOrMonth(day), formatDayOrMonth(month), year)
	}
}

/*
	formatDayOrMonth –¥–æ–±–∞–≤–ª—è–µ—Ç 0 –≤ –Ω–∞—á–∞–ª–æ, –µ—Å–ª–∏ —ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è.
	–ü—Ä–∏–º–µ—Ä—ã formatDayOrMonth:

	1.09.2022 => 01.09.2022
	01.9.2022 => 01.09.2022
	1.9.2022 => 01.09.2022

*/

func formatDayOrMonth(value string) string {
	if len(value) == 1 {
		return "0" + value
	}
	return value
}

/*
	FormatDate —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É, –∑–∞–º–µ–Ω—è—è –ª—é–±—ã–µ –∑–Ω–∞–∫–∏ –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –¥–∞—Ç—ã –Ω–∞ "." .
	–ü—Ä–∏–º–µ—Ä—ã formatDate:

	‚Ä¢	"1 –ù–æ—è–±—Ä—è 1923" -> "01.11.1923"
	‚Ä¢	"—è–Ω–≤–∞—Ä—å 2033" -> "01.2023"
	‚Ä¢	"11/12/1923" -> "11.12.1923"
	‚Ä¢	"11üëâ12üëâ1923" -> "11.12.1923"
	‚Ä¢	"11—é12—é1923" -> "11.12.1923"
	‚Ä¢	"11/1925" -> "11.1925"
	‚Ä¢	"11üëâ1925" -> "11.1925"
	‚Ä¢	"1925" -> "1925"

*/

func FormatDate(value string) string {
	formattedDate := ReplaceDateWithMonthNumber(value)
	formattedDate = regexNonDigit.ReplaceAllStringFunc(formattedDate, func(s string) string {
		return "."
	})
	date := strings.Split(formattedDate, ".")
	result := []string{}

	for _, d := range date {
		if d != "" {
			result = append(result, d)
		}
	}

	var year string
	var month string
	var day string

	if len(result) == 3 {
		year = result[2]
		month = result[1]
		day = result[0]
	} else if len(result) == 2 {
		year = result[1]
		month = result[0]
	} else {
		year = result[0]
	}

	isWithoutDays := len(day) == 0
	onlyYear := len(month) == 0 && len(day) == 0

	if onlyYear {
		return year
	} else if isWithoutDays {
		return fmt.Sprintf("%s.%s", formatDayOrMonth(month), year)
	}
	return fmt.Sprintf("%s.%s.%s", formatDayOrMonth(day), formatDayOrMonth(month), year)
}

func IsMatchDate(text string) bool {
	return RegexDateRangeExcludeEnd.MatchString(text)
}

func isReverseDate(text string) bool {
	return regexFullDateReverse.MatchString(text)
}

func ParsePeriod(text string) (*WorkPeriod, error) {
	date := strings.TrimSpace(text)
	if date == "" || !IsMatchDate(date) {
		return &WorkPeriod{
			DateStart: "",
			DateEnd:   "",
		}, nil
	}

	separatedDates := SeparateDates(date)
	var result []string
	/*
		–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É - —ç—Ç–æ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å —á—Ç–æ–±—ã –¥–∞–ª—å—à–µ
		–≤ –∫–æ–¥–µ –Ω–µ –ø–ª–æ–¥–∏—Ç—å isReverseDate(datePart)
	*/
	for _, datePart := range separatedDates {
		datePart = FormatDate(datePart)
		isReverse := isReverseDate(datePart)
		if isReverse {
			datePart = reverseDate(datePart)
		}
		result = append(result, datePart)
	}

	if len(result) == 0 {
		return &WorkPeriod{
			DateStart: "",
			DateEnd:   "",
		}, nil
	}

	startDate := result[0]
	endDate := ""

	if len(result) > 2 {
		// –¢—É—Ç –Ω—É–∂–Ω–∞ —Å-–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å, –∫–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –ø–æ–ª–æ–º–∞–ª —Å–æ—Ñ—Ç

		resStr := fmt.Sprintf("Text pasrsin failed: %s", text)
		fmt.Println(resStr)

		return nil, errors.New(resStr)
	}

	if len(result) == 2 {
		endDate = result[1]
	}

	return &WorkPeriod{
		DateStart: startDate,
		DateEnd:   endDate,
	}, nil
}
